# -*- coding: utf-8 -*-
"""air.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_I7DGfTcGtjrWtzTuahSE63gnSBP6L3q
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import random as rnd
from sklearn import preprocessing
import warnings
warnings.filterwarnings("ignore")

###############파일 불러오기
print("file_load...")
df = pd.read_csv("AFSNT.csv", encoding='euc-kr')
#############전처리하기
print("pre-processing...")
#결항 제거
df = df.loc[df['CNL'] == 'N']
#등록 기호 제거
df = df[df['REG'].notnull()]
#부정기편 제거하기
df = df[ df['IRR'] == "N" ]
# 시/분 단위로 나누기
STT_Hour = []
STT_Minute = []
ATT_Hour = []
ATT_Minute = []
STT = df['STT']
ATT = df['ATT']
sub = STT.str.split(':', expand = True)
STT_Hour = sub.iloc[0:, 0]
STT_Minute = sub.iloc[0:, 1]
sub2 = ATT.str.split(':', expand = True)
ATT_Hour = sub2.iloc[0:, 0]
ATT_Minute = sub2.iloc[0:, 1]
df['STT_H'] = STT_Hour.astype(int)
df['STT_M'] = STT_Minute.astype(int)
df['ATT_H'] = ATT_Hour.astype(int)
df['ATT_M'] = ATT_Minute.astype(int)
df_STT_Time = df['STT_H'] * 60 + df['STT_M']
df_ATT_Time = df['ATT_H'] * 60 + df['ATT_M']
df_H3 = df_ATT_Time - df_STT_Time
# H3값이 음수면 빨리 출발, 양수면 늦은 출발(지연가능)
df['Time'] = df_H3
df = df.loc[(df['Time'] >= -180) | (df['DLY'] != 'Y') | (df['ATT_H'] < 0) | (df['ATT_H'] > 3) | (df['STT_H'] < 22)]
df = df.loc[(df['STT_H'] != 0) & (df['STT_H'] != 1) & (df['STT_H'] != 23)]
df['STT_H'].loc[(df['STT_H'] == 6)] = 0
df['STT_H'].loc[(df['STT_H'] >= 7) & (df['STT_H'] <= 12)] = 1
df['STT_H'].loc[(df['STT_H'] >= 13) & (df['STT_H'] <= 19)] = 2
df['STT_H'].loc[(df['STT_H'] == 20)] = 3
df['STT_H'].loc[(df['STT_H'] == 21) | (df['STT_H'] == 22)] = 4
print(df.head())

# string split
sz = 15
for i in range(1, sz+1):
    df['ARP'].loc[df['ARP'] == ('ARP'+str(i))] = i
print(sz)

for i in range(1, sz+1):
    df['ODP'].loc[df['ODP'] == ('ARP'+str(i))] = i

#학습 데이터 외의 칼럼 제거
df['DLY'].loc[df['DLY'] == 'Y'] = 1
df['DLY'].loc[df['DLY'] == 'N'] = 0
df['SDT_DY'].loc[df['SDT_DY'] == '월'] = 0
df['SDT_DY'].loc[df['SDT_DY'] == '화'] = 1
df['SDT_DY'].loc[df['SDT_DY'] == '수'] = 2
df['SDT_DY'].loc[df['SDT_DY'] == '목'] = 3
df['SDT_DY'].loc[df['SDT_DY'] == '금'] = 4
df['SDT_DY'].loc[df['SDT_DY'] == '토'] = 5
df['SDT_DY'].loc[df['SDT_DY'] == '일'] = 6
label_encoder = preprocessing.LabelEncoder()
df_y = label_encoder.fit_transform(df['FLO']) 
df['FLO'] = df_y.reshape(len(df_y), 1)
df_y = label_encoder.fit_transform(df['REG']) 
df['REG'] = df_y.reshape(len(df_y), 1)
df_y = label_encoder.fit_transform(df['AOD']) 
df['AOD'] = df_y.reshape(len(df_y), 1)
df = df.drop(['CNL','CNR','IRR','DRR','SDT_YY','ATT','Time',"STT","ATT","ATT_H","ATT_M","STT_M"], axis = 1)

df = df.drop(['FLT'], axis = 1)

"""df = df.drop(['FLT'], axis = 1)

# **train&test**
"""
print(df.head())
from sklearn.metrics import classification_report
from sklearn.model_selection import StratifiedShuffleSplit
#### Train, Valid Set 준비하기
split = StratifiedShuffleSplit(n_splits = 1, test_size = 0.2, random_state=42)
df_x = df
for df_index, val_index in split.split(df_x, df_x['AOD']) :
    df1 = df_x.iloc[df_index]
    val1 = df_x.iloc[val_index]
#학습데이터셋 스플릿하기
df_y = df1['DLY']
df_x = df1.drop(['DLY'], axis=1)
#밸리드데이터셋 스플릿하기
val_y = val1['DLY']
val_x = val1.drop(['DLY'], axis=1)
print("split done...")
# Random Forest
from sklearn.ensemble import RandomForestClassifier

# col: 출발/도착 지연/비지연 등등 구분
est = 10000
print("Machine Learning...")
###### 학습하기
random_forest = RandomForestClassifier(n_estimators=est,  min_samples_leaf=3)

random_forest.fit(df_x, df_y)
##### 예측결과
Y_pred = random_forest.predict(val_x)
print(random_forest)
print(classification_report(val_y, Y_pred))

from sklearn.metrics import roc_curve, auc,confusion_matrix, roc_auc_score
y_score = random_forest.predict_proba(val_x)
print(y_score)
print(roc_auc_score(val_y, y_score[:,1]))

print('end')